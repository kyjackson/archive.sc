<%- include("partials/header.ejs") %>

<div class="container px-0 py-3">

    <!-- Jumbotron card containing search bar -->
    <div class="p-4 mb-4 text-white bg-dark rounded-3">
        <div class="p-4 container-fluid" id="search">
            <form id="searchbar" action="/results" method="GET">
                <h1 class="display-6 fw">Enter Query</h1>
                <p class="small">Simply enter a word or phrase in the search bar below to find all occurrences among the videos uploaded to the Star Citizen Youtube channel.</p>

                <div class="row justify-content-center">
                    <div class="my-4 col-9">
                    <input type="text" class="form-control text-center" id="queryBar" name="query" placeholder="Search...">
                    </div>
                </div>

                <button class="btn btn-light btn-lg" type="submit">
                    Search Archive
                    <span id="loading" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                </button>
            </form>

            <!-- Search results get displayed inside this div -->
            <div id="results" class="pt-4 d-flex flex-column justify-content-center"></div>

        </div>
    </div>

    <!-- Cards containing purpose statement and search stats -->
    <div class="row align-items-md-stretch">
        
        <!-- Purpose statement card -->
        <div class="col-md-6 mb-4">
            <div class="h-100 p-5 justify-content-left text-white bg-dark rounded-3">
                <h2>Purpose</h2>
                <p class="text-start">At the time of writing this, there are over 1500 videos uploaded to the Star Citizen YouTube channel, ranging anywhere from 30 seconds to over an hour in length. When discussing the game, people will often bring up something mentioned in one or more videos uploaded years ago. With multiple weekly uploads over the years, so much has been spoken by CIG that people wanting to provide sources for their claims will have an exceedingly difficult time doing so if they don't know the particular video.</p>

                <p class="text-start">With the help of YouTube's auto-generated captions, this changes. This site allows anyone to search a database of all videos on the Star Citizen channel and their associated captions to quickly find the info they're searching for. Full transcriptions of each video are provided, along with timestamps for search terms that have a match. Searching for any mention of future plans or ships that punch above their weight class should now take minutes, not hours, of combing through videos. Additionally, search stats are provided so anyone can see what the community has been most curious about.</p>
                
            </div>
        </div>

        <!-- Search stats card -->
        <div class="col-md-6 mb-4">
            <div class="h-100 p-5 text-white bg-dark rounded-3">
                <h2>Caveats</h2>
                <p class="text-start">1. <i>Captions are not always accurate.</i></p>
                <p class="ps-5 text-start">
                    Due to the captions being auto-generated, they are not always accurate. What can be heard in a video will sometimes be transcribed as something unexpected by Google's caption transcription algorithm. This tends to occur more often in older videos.
                </p>

                <p class="text-start">2. <i>Not all searches are conclusive.</i></p>
                <p class="ps-5 text-start">
                    Sometimes, a certain word or phrase can be broken up in one video's caption track and not in another. This can cause similar search terms to unexpectedly return different results (e.g., "multicrew" and "multi crew" return different results), and in some cases one term might return results while a similar term returns none. If either of these occur, try rephrasing your search to use a different keyword, or to be less specific.
                </p>

                <p class="text-start">3. <i>Auto-generated captions only have English localization.</i></p>
                <p class="ps-5 text-start">
                    Unfortunately, auto-generated captions are not available in languages other than English. If you are interested in volunteering to transcribe caption tracks for another language, contact me and I'll consider any options with regard to adding them to my database.
                </p>
            </div>
        </div>

    </div>

</div>

<script> // todo: page numbers for results

    // first set up Youtube Iframe API
    let tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    let firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // wait for Iframe API to be ready before searching
    function onYouTubeIframeAPIReady() {
        console.log("iframe api is ready");
        return;
    }

    $("#loading").hide();
    //$("#results").hide();

    /**
     * Send a GET request to our own API endpoint for retrieving relevant captions from our database.
     */
    $("form").on("submit", function(event) {
        event.preventDefault();
        $("#results").empty();

        let query = $("#queryBar").val();

        if (query.length == 0) {

            console.log("error: no query");

        } else {
            $("#loading").show();
            $("#loading").css("visibility", "visible");
            $("#results").show();

            let url = `https://archivesc.kjackson96.repl.co/results?query=${query}`;
            $.ajax({
                method: "GET",
                url: url,
                dataType: 'json'
                //data: req.query.query
            })
            .done(function (result) {
                $("#loading").hide();
                $("#loading").css("visibility", "hidden");
                $("#results").show();

                // get amount of video results
                let total = 0;
                for (let i = 0; i < result.length; i++) {
                    for (let j = 0; j < result[i].length; j++) {
                        total++;
                    }
                }

                $("#results").html(`<p class="mx-auto justify-content-center text-start">Found ${total} videos containing "${query}"</p>`);

                if (result.length > 0) {
                    
                    // display page navigation bar
                    let page = 0;

                    $("#results").append(`

                        <div class="mx-auto justify-content-end">
                        <nav aria-label="page-navigation">
                            <ul class="pagination">
                                <li class="page-item">
                                    <a id="previousPage" class="page-link" href="#results" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>

                                <li class="page-item">
                                    <span id="currentPage" class="page-link">${page+1} of ${result.length}</span>
                                </li>

                                <li class="page-item">
                                    <a id="nextPage" class="page-link" href="#results" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                        </div>

                        <div class="mx-auto w-75 accordion accordion-flush" id="resultsAccordion"></div>
                    `);

                    
                    let pageMap = new Map();
                    result.forEach(function (page, index) {
                        //console.log(index);
                        pageMap.set(index, page);
                    });
                    
                    // always display the first page first
                    $("#previousPage").prop("disabled");
                    showPage(pageMap.get(page));
                    //console.log(pageMap.get(0));

                    // set up result page navigation
                    $("#previousPage").on("click", function() {
                        //console.log("clicked");
                        if (page > 0) {
                            page--;
                            $("#currentPage").html(`${page+1} of ${result.length}`);
                            showPage(pageMap.get(page));

                            if (page === 0) {
                                $("#previousPage").prop("disabled");
                            }

                            if (page < result.length && $("#nextPage").attr("disabled")) {
                                $("#nextPage").removeProp("disabled");
                            }
                        }
                    });

                    $("#nextPage").on("click", function() {
                        //console.log("clicked");
                        if (page < result.length-1) {
                            page++;
                            $("#currentPage").html(`${page+1} of ${result.length}`);
                            showPage(pageMap.get(page));

                            if (page === result.length) {
                                $(this).prop("disabled");
                            }

                            if (page > 0 && $("#previousPage").attr("disabled")) {
                                $("#nextPage").removeProp("disabled");
                            }
                        }
                    });

                } 

                console.log(result);
            });

            // pagination here


        }

        // showpage function here
        function showPage(page) {
            $("#resultsAccordion").empty();

            for (let video in page) {

                let captions = JSON.parse(page[video].captionTrack);
                let timestamps = new Map();

                // get every occurance of the search phrase in the caption track
                // NOTE: includes() is case sensitive, so convert captions and query to lowercase first
                captions.forEach(function(segment, index) {
                    if (segment.text.toLowerCase().includes(query.toLowerCase())) {
                        let longSegment = segment.text;
                        
                        if (captions[index-1] !== undefined) {
                            longSegment = `${captions[index-1].text} - ${longSegment}`;
                        }
                        if (captions[index+1] !== undefined) {
                            longSegment = `${longSegment} - ${captions[index+1].text}`;
                        }

                        // convert seconds to hr:min:sec
                        // let hr = Math.floor(segment.start / 3600);
                        // let min = Math.floor((segment.start % 3600)/ 60);
                        // let sec = Math.floor(segment.start - (min * 60));

                        // let hrPadded = ('00'+hr).slice(-2);
                        // let minPadded = ('00'+min).slice(-2);
                        // let secPadded = ('00'+sec).slice(-2);

                        //timestamps.set(segment.start, segment.text);
                        timestamps.set(segment.start-3, longSegment);
                    }
                });

                // append accordion items with all relevant video info
                $("#resultsAccordion").append(`
                    <div class="bg-dark pt-3 accordion-item" id="${page[video].videoId}">

                        <h2 class="accordion-header" id="header-${page[video].videoId}">
                            <button class="bg-dark bg-gradient text-white accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-${page[video].videoId}" aria-expanded="false" aria-controls="collapse-${page[video].videoId}">
                                <div class="w-100 text-center accordion-header-text">
                                    ${page[video].videoTitle}
                                </div>
                            </button>
                        </h2>

                        <div id="collapse-${page[video].videoId}" class="bg-secondary accordion-collapse collapse" aria-labelledby="header-${page[video].videoId}">
                            <div id="body-${page[video].videoId}" class="bg-dark accordion-body">
                                <div id="player-${page[video].videoId}"></div>
                                <div id="timestamps-${page[video].videoId}" class="d-flex flex-column "></div>
                            </div>
                        </div>

                    </div>
                `);

                // create the iframe for each video
                let player = new YT.Player(`player-${page[video].videoId}`, {
                    height: '480',
                    width: '720',
                    videoId: page[video].videoId,
                    host: 'https://www.youtube.com'
                    //host: window.location
                });

                // append timestamp links to each accordion item
                timestamps.forEach(function (value, key) {
                    let time = format(key);

                    $(`#timestamps-${page[video].videoId}`).append(`

                        <br>
                        <div class="pt-3 d-flex justify-content-left text-start">
                            <a href="#header-${page[video].videoId}" id="play-${key}-${page[video].videoId}">${time}</a>
                            <span>&nbsp;-&nbsp;</span>
                            <p>"...${value}..."</p>
                        </div>
                    
                    `);
                    
                    $(`a[id*='${key}']`).on("click", function () {
                        //console.log($(this));
                        player.seekTo(key, true);
                        player.playVideo();
                    });
                    
                });
            }
        }

        
        
    });

    // helper function for converting time in seconds to time in hh:mm:ss
    // reference: https://stackoverflow.com/questions/3733227/javascript-seconds-to-minutes-and-seconds
    function format(seconds) {   
        var hr = Math.floor(seconds / 3600);
        var min = Math.floor((seconds % 3600) / 60);
        var sec = Math.floor(seconds % 60);

        // format result depending on amount of each time component
        var result = "";
        if (hr > 0) {
            result += "" + hr + ":" + (min < 10 ? "0" : "");
        }
        result += "" + min + ":" + (sec < 10 ? "0" : "");
        result += "" + sec;
        return result;
    }

</script>

<%- include("partials/footer.ejs") %>